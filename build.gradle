apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.5
version = '1.0'

mainClassName = "edu.ucl.mrrr.YamlRunnerLocal"

repositories {
    mavenCentral()
}

configurations {
    provided
    includeInJar
    sshAntTask
}

//sourceSets {
//    main {
//        compileClasspath += configurations.provided
//        //compileClasspath += configurations.includeInJar
//    }
//}

dependencies {
    // compiles
    compile 'org.apache.hadoop:hadoop-client:2.2.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-beanutils:commons-beanutils:1.9.2'

    // includeInJars
    includeInJar 'org.yaml:snakeyaml:1.14'
    includeInJar 'net.jodah:typetools:0.3.1'

    //others
    testCompile group: 'junit', name: 'junit', version: '4.11'
    sshAntTask 'org.apache.ant:ant-jsch:1.7.1', 'jsch:jsch:0.1.29'

    //compile all includeInJar entries as well
    configurations.compile.extendsFrom(configurations.includeInJar)
}

jar {
    into('lib') {
        println "includeInJar: " + configurations.includeInJar.collect { File file -> file }
        from configurations.includeInJar
    }
}

task copyDependencies(type:Copy) {
    from configurations.compile
    into 'build/dependencies'
}

run{
    args 'example.yaml'
}

task sshdeploy() {

    dependsOn jar

    doLast {
        //println 'SCPing jar(s)'

        // Get passphrase from user input.
        //def console = System.console()
        //def passphrase = console.readPassword('%s: ', 'Please enter the passphrase for the keyfile')

        // Redefine scp Ant task, with the classpath property set to our newly defined
        // sshAntTask configuration classpath.
        ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp', classpath: configurations.sshAntTask.asPath)

        println("SCPing to : $sshpath port $sshport using keyfile $keyfile")

        // Invoke the scp Ant task. (Use gradle -i update to see the output of the Ant task.)
        ant.scp(todir: "$sshpath",
                port: "$sshport",
                keyfile: "$keyfile",
                //passphrase: passphrase as String, // Use phassphrase entered by the user.
                passphrase: '', // provide bogus keyphrase for keyfile without passphrase
                trust: true, // or provide knownhosts
                verbose: 'true') {
            fileset(dir: 'build/libs') {
                include(name: '*.jar')
            }
        }
    }
}